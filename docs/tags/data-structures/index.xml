<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Structures on Ferris Ellis</title>
    <link>https://www.ferrisellis.com/tags/data-structures/</link>
    <description>Recent content in Data Structures on Ferris Ellis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright Ferris Ellis 2017-2021. All rights reserved.</copyright>
    <lastBuildDate>Thu, 11 May 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://www.ferrisellis.com/tags/data-structures/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>eBPF, part 2: Syscall and Map Types</title>
      <link>https://www.ferrisellis.com/content/ebpf_syscall_and_maps/</link>
      <pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.ferrisellis.com/content/ebpf_syscall_and_maps/</guid>
      <description>Due to the its fast adoption, using eBPF is different for each system it has been integrated with.
However, the common denominator for all uses is the syscall for eBPF.
This syscall, the &lt;code&gt;bpf&lt;/code&gt; syscall in Linux, allows eBPF programs to be loaded into the kernel and eBPF-maps to be created and manipulated.
As the second installment in the eBPF series, this article works through all the commands of the syscall plus the different eBPF-map types, since they are controlled through the syscall.</description>
    </item>
    
  </channel>
</rss>
